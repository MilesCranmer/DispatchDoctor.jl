name: CI
on:
  push:
    branches:
      - main
    tags: ['*']
  pull_request:
  workflow_dispatch:
concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
jobs:
  test:
    name: jl${{ matrix.version }}-${{ matrix.os }}-${{ matrix.arch }}-${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    permissions: # needed to allow julia-actions/cache to proactively delete old caches that it has created
      actions: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.10'
          - '1'
        os:
          - ubuntu-latest
        arch:
          - x64
    env:
      DISPATCH_DOCTOR_TEST: "unit"
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v2
      - uses: julia-actions/julia-buildpkg@v1
      - name: "Run tests"
        run: |
          julia --color=yes -e 'import Pkg; Pkg.add("Coverage")'
          julia --color=yes --threads=auto --check-bounds=yes --depwarn=yes --code-coverage=user -e 'import Coverage; import Pkg; Pkg.activate("."); Pkg.test(coverage=true)'
          julia --color=yes coverage.jl
        shell: bash
      - name: "Coveralls"
        uses: coverallsapp/github-action@v2
        with:
          path-to-lcov: lcov.info
          parallel: true
          flag-name: julia-${{ matrix.version }}-${{ matrix.os }}-${{ matrix.arch }}-${{ github.event_name }}

  integration_test:
    name: integration-jl${{ matrix.version }}-${{ github.event_name }}-${{ matrix.test }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      actions: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        version: ['1']
        os: ['ubuntu-latest']
        test:
          - "enzyme"
          - "zygote"
          - "mooncake"
          - "dynamic-expressions"
    env:
      DISPATCH_DOCTOR_TEST: ${{ matrix.test }}
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
      - uses: julia-actions/cache@v2
      - uses: julia-actions/julia-buildpkg@v1
      - name: "Add dependencies"
        run: |
          if [[ ${{ matrix.test }} == "enzyme" ]]; then
            julia --color=yes --threads=auto --project=test/ -e 'import Pkg; Pkg.add("Enzyme")'
          elif [[ ${{ matrix.test }} == "mooncake" ]]; then
            julia --color=yes --threads=auto --project=test/ -e 'import Pkg; Pkg.add("Mooncake")'
          fi
      - name: "Run integration tests"
        # enzyme test is flaky through no fault of our own
        continue-on-error: ${{ matrix.test == 'enzyme' }}
        id: test-step
        run: |
          julia --color=yes -e 'import Pkg; Pkg.add("Coverage")'
          julia --color=yes --threads=auto --check-bounds=yes --depwarn=yes --code-coverage=user -e 'import Coverage; import Pkg; Pkg.activate("."); Pkg.test(coverage=true)'
          julia --color=yes --project=test/ coverage.jl
        shell: bash
      - name: "Coveralls"
        if: steps.test-step.outcome == 'success' && steps.test-step.conclusion == 'success'
        uses: coverallsapp/github-action@v2
        with:
          path-to-lcov: lcov.info
          parallel: true
          flag-name: julia-integration-${{ matrix.test }}-${{ matrix.version }}-${{ github.event_name }}

  coveralls:
    name: Indicate completion to coveralls
    runs-on: ubuntu-latest
    needs: [test, integration_test]
    steps:
      - name: Finish
        uses: coverallsapp/github-action@v2
        with:
          parallel-finished: true

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: write
      statuses: write
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - name: Configure doc environment
        run: |
          julia --project=docs/ -e '
            using Pkg
            Pkg.develop(PackageSpec(path=pwd()))
            Pkg.instantiate()'
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-docdeploy@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY_CAM: ${{ secrets.DAMTP_DEPLOY_KEY }}
      - run: |
          julia --project=docs -e '
            using Documenter: DocMeta, doctest
            using DispatchDoctor
            DocMeta.setdocmeta!(DispatchDoctor, :DocTestSetup, :(using DispatchDoctor); recursive=true)
            doctest(DispatchDoctor)'
